"use strict"
const express = require('express')
const bodyParser = require('body-parser')
const VkBot = require('node-vk-bot-api')
const Scene = require('node-vk-bot-api/lib/scene')
const Session = require('node-vk-bot-api/lib/session')
const Stage = require('node-vk-bot-api/lib/stage')
// const fetch = require('node-fetch');

const utils = require('./urils')

require('dotenv').config()

const app = express()
const bot = new VkBot ({
  token: process.env.TOKEN,
  confirmation: process.env.CONFIRMATION
})

const session = new Session();
const sceneSkils = new Scene('skils',
  (ctx) => {
    ctx.scene.leave()
    ctx.reply(`üìî –Ø –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞ —Ç–µ–±—è –¥–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. 
    –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–¥–Ω–µ–≤–Ω–∏–∫' –∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∫–æ–≥–¥–∞ —É —Ç–µ–±—è —Ñ–∏–∑-—Ä–∞.
    `)
  },
)

const stageSceneSkils = new Stage(sceneSkils)
 
bot.use(session.middleware());
bot.use(stageSceneSkils.middleware())

bot.command('—á—Ç–æ —É–º–µ–µ—à—å?', (ctx) => {
  ctx.scene.enter('skils')
})

bot.command('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', (ctx) => {
  const text = ctx.message.text
  let dayNumber = []
  let textArray = text.split(' ').slice(1)
  console.log(`Type of textArray: ${typeof(textArray)}, Obj: ${textArray}`);
  
  if (textArray.length === 2) {
    const dataRegExp = RegExp(/([0-2][0-9]|(3)[0-1])(-|.)(((0)[0-9])|((1)[0-2]))(-|.)\d{4}/g)
    // const dataRegExp = (/((((?:19|20)\d\d)[-|.|\/](0[1-9]|1[012])[-|.|\/](0[1-9]|[12][0-9]|3[01]))|(([0-2][0-9]|(3)[0-1])(-|.|\/)(((0)[0-9])|((1)[0-2]))(-|.|\/)\d{4}))/g)
    const textRegExp = RegExp(/[–ê-–Ø–∞-—è( )]/g)
    console.log(textArray)
    if (textArray.every((num) => num.match(dataRegExp) != null)){  // format: 19-02-2020
      textArray.forEach(element => {        
        dayNumber.push(utils.dateInNumber(element))
      });
    } else if (textArray.every((num) => num.match(textRegExp) != null)){   // format: –ø–Ω –≤—Ç
      textArray.forEach(element => {
        dayNumber.push(utils.weekDayInNumber(element))
      });
    } else {
      ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –¥–∞—Ç üòÖ`)
    }
    // if (!dayNumber.some(elem => elem === 1)) {
    //   ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –¥–∞—Ç üòÖ`)
    // }
  }
  // console.log(`Type of dayNumber: ${typeof(dayNumber)}, Obj0: ${dayNumber[0]}, Obj1: ${dayNumber[1]}`);

  (async () => {
    let response = await fetch(process.env.SERVER_URL, {
      method: 'POST'
    }).then().catch()

    let result = await response.json();
    ctx.reply(`–í–∞—à –º–∞—Å—Å–∏–≤ ${dayNumber}`)
  })()
  
})

bot.on((ctx) => {
  const text = ctx.message.text


  ctx.reply(`–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –≤—Å–µ–≥–æ –ª–∏—à—å –∫–æ–¥' –∏ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–±–µ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ üòî`)
})

app.use(bodyParser.json())

app.post('/', bot.webhookCallback)

app.listen(80)